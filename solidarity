#!/bin/bash
set -eo pipefail
FILE=".solidarity"
LOG_LEVEL=-2

throw() {
  if [[ $LOG_LEVEL -le 1 ]] ; then
    echo -e "\033[0;31m ✖️ $1\033[0m"
  fi
  exit 1
}

warn() {
  if [[ $LOG_LEVEL -le 0 ]] ; then
    echo -e "\n\033[0;33m    ✖️ $1\033[0m"
  fi
}

info() {
  if [[ $LOG_LEVEL -le -1 ]] ; then
    echo -e "\n\033[1;30m$1\033[0m";
  fi
}

debug() {
  if [[ $LOG_LEVEL -le -2 ]] ; then
    echo -e "\n\033[1;30m      → $1\033[0m";
  fi
}

ok() {
  if [[ $LOG_LEVEL -le -1 ]] ; then
    echo -e "\033[2K\r\033[0;32m    ✔️ $1\033[0m"
  fi
}

if [ -f "$FILE" ]; then
  jq -r '.requirements | to_entries[] | "\(.key) \(.value)"' $FILE | while read SECTION RULES; do
    info "Checking $SECTION"
    for X in $(echo "$RULES" | jq -r '.[] | @base64'); do
      _jq() {
        echo "${X}" | base64 --decode | jq -r ${1}
      }

      PLATFORM=$(_jq '.platform')
      RULE=$(_jq '.rule')
      ENV_PLATFORM=`perl -pe 's/(\w)/\L$1/g;' <<< "$(uname -s)"`
      KEYS=(`_jq 'keys[]'`)

      if [ "$PLATFORM" == 'null' ] || [ "$PLATFORM" == "$ENV_PLATFORM" ] ; then
        case "$RULE" in
          "cli")
            BINARY=""
            case "${KEYS[@]}" in *"binary"*) BINARY=$(_jq '.binary') ;; esac

            SEMVER=""
            case "${KEYS[@]}" in *"semver"*) SEMVER=$(_jq '.semver') ;; esac

            ERROR=""
            case "${KEYS[@]}" in *"error"*) ERROR=$(_jq '.error') ;; esac

            VERSION="--version"
            case "${KEYS[@]}" in *"version"*) VERSION=$(_jq '.version') ;; esac

            if [ -n "$SEMVER" ] ; then
              SEMVER_MATCH="(\d+(\.\d+)?(\.\d+)?)"
              INSTALLED_VERSION=$($BINARY $VERSION | egrep -oh1 "$SEMVER_MATCH" | head -1)
              WANTED_VERSION=$(echo "$SEMVER" | egrep -oh1 "$SEMVER_MATCH" | head -1)
              if [ -n "`semver "$INSTALLED_VERSION" -c -r "$SEMVER"`" ] ; then
                ok "'$BINARY' binary $SEMVER"
              else
                warn "'$BINARY' binary $SEMVER"
                debug "`echo "$ERROR" | sed -e "s/{{installedVersion}}/$INSTALLED_VERSION/;s/{{wantedVersion}}/$WANTED_VERSION/"`"
              fi
            else
              if [ -n "$(which $BINARY)" ] ; then
                ok "'$BINARY' binary"
              else
                warn "'$BINARY' binary"
              fi
            fi
          ;;
          "env")
            VARIABLE=""
            case "${KEYS[@]}" in *"variable"*) VARIABLE=$(_jq '.variable') ;; esac

            if [ ! -z "${!VARIABLE-}" ]; then
              ok "'$VARIABLE' exists"
            else
              warn "'$VARIABLE' does not exist"
            fi
          ;;
          "shell")
            COMMAND=""
            case "${KEYS[@]}" in *"command"*) COMMAND=$(_jq '.command') ;; esac

            MATCH=""
            case "${KEYS[@]}" in *"match"*) MATCH=$(_jq '.match') ;; esac

            if eval "$COMMAND" | grep -qE "$MATCH"; then
              ok "'$COMMAND' matches '$MATCH'"
            else
              warn "'$COMMAND' does not match '$MATCH'"
            fi
          ;;
        esac
      fi
    done
  done
else
  throw ".solidarity file not found";
fi
